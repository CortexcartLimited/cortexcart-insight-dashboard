'use client';

import { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import Layout from '@/app/components/Layout';
import StatCard from '@/app/components/StatCard';
import { SparklesIcon, CalendarIcon, PaperAirplaneIcon, ClipboardDocumentIcon, ChartBarIcon, PencilSquareIcon, CheckIcon, UserGroupIcon, XCircleIcon } from '@heroicons/react/24/solid';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import { Line, Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';
import ImageManager from '@/app/components/ImageManager';
import { DndContext, DragOverlay, useDroppable, pointerWithin } from '@dnd-kit/core';
import { withDragAndDrop } from 'react-big-calendar/lib/addons/dragAndDrop';
// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);

// Setup the localizer by telling react-big-calendar that we use moment.js for dates
const localizer = momentLocalizer(moment);

// --- PLATFORMS CONFIGURATION ---
const PLATFORMS = {
 // Make sure to import the CSS for react-big-calendar and its drag and drop addon
 import 'react-big-calendar/lib/css/react-big-calendar.css';
    x: {
        name: 'X (Twitter)', maxLength: 280, type: 'character',
        icon: (props) => (<svg {...props} viewBox="0 0 1200 1227"><path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" fill="currentColor"/></svg>),
        placeholder: 'What&apos;s happening?!',
        disabled: false,
    },
    instagram: { name: 'Instagram', maxLength: 2200, type: 'character', icon: (props) => (<svg {...props} aria-label="Instagram" role="img" viewBox="0 0 512 512"><rect height="512" rx="15%" ry="15%" width="512" fill="#fff" stroke="#000" strokeWidth="30"/><g stroke="#000" strokeWidth="30"><rect height="302" rx="23%" ry="23%" width="302" x="105" y="105"/><circle cx="256" cy="256" r="72"/><circle cx="347" cy="165" r="18"/></g></svg>), placeholder: 'Share a photo, video, or idea...', disabled: true },
    facebook: { name: 'Facebook', maxLength: 63206, type: 'character', icon: (props) => (<svg {...props} viewBox="0 0 24 24"><path fill="#1877F2" d="M12 2C6.477 2 2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.879V14.89h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v7.028C18.343 21.128 22 16.991 22 12c0-5.523-4.477-10-10-10z"/></svg>), placeholder: 'What&apos;s on your mind?', disabled: true },
    linkedin: { name: 'LinkedIn', maxLength: 3000, type: 'character', icon: (props) => (<svg {...props} viewBox="0 0 24 24"><path fill="#0A66C2" d="M19 0H5a5 5 0 0 0-5 5v14a5 5 0 0 0 5 5h14a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5zM8 19H5V8h3v11zM6.5 6.73c-.966 0-1.75-.79-1.75-1.76s.784-1.76 1.75-1.76 1.75.79 1.75 1.76-.784 1.76-1.75 1.76zM20 19h-3v-5.6c0-1.33-.02-3.04-1.85-3.04-1.85 0-2.13 1.45-2.13 2.94V19h-3V8h3v1.3h.04c.4-.76 1.38-1.55 2.76-1.55 2.95 0 3.5 1.94 3.5 4.46V19z"/></svg>), placeholder: 'Share a professional update or article...', disabled: true },
    pinterest: { name: 'Pinterest', maxLength: 500, type: 'character', icon: (props) => (<svg {...props} viewBox="0 0 24 24"><path fill="#E60023" d="M12 2C6.477 2 2 6.477 2 12c0 4.14 2.686 7.66 6.357 8.94.02-.19.03-.4.05-.61l.33-1.4a.12.12 0 0 1 .1-.1c.36-.18 1.15-.56 1.15-.56s-.3-.91-.25-1.79c.06-.9.65-2.12 1.46-2.12.68 0 1.2.51 1.2 1.12 0 .68-.43 1.7-.65 2.64-.18.78.38 1.42.92 1.42 1.58 0 2.63-2.1 2.63-4.22 0-1.8-.95-3.26-2.7-3.26-2.12 0-3.32 1.58-3.32 3.16 0 .6.22 1.25.5 1.62.03.04.04.05.02.13l-.15.65c-.05.2-.14.24-.32.08-1.05-.9-1.5-2.3-1.5-3.82 0-2.78 2.04-5.38 5.8-5.38 3.1 0 5.2 2.25 5.2 4.67 0 3.1-1.95 5.42-4.62 5.42-.9 0-1.75-.46-2.05-1l-.52 2.1c-.24 1-.92 2.25-.92 2.25s-.28.1-.32.08c-.46-.38-.68-1.2-.55-1.88l.38-1.68c.12-.55-.03-1.2-.5-1.52-1.32-.9-1.9-2.6-1.9-4.22 0-2.28 1.6-4.3 4.6-4.3 2.5 0 4.2 1.8 4.2 4.15 0 2.5-1.55 4.5-3.8 4.5-.75 0-1.45-.38-1.7-.82l-.28-.9c-.1-.4-.2-.8-.2-1.22 0-.9.42-1.68 1.12-1.68.9 0 1.5.8 1.5 1.88 0 .8-.25 1.88-.58 2.8-.25.7-.5 1.4-.5 1.4s-.3.12-.35.1c-.2-.1-.3-.2-.3-.4l.02-1.12z"/></svg>), placeholder: 'Add a Pin description...', disabled: false },
};
const platformKeys = Object.keys(PLATFORMS);

// Wrap the Calendar component with the drag and drop functionality
const DragAndDropCalendar = withDragAndDrop(Calendar);

const SocialNav = ({ activeTab, setActiveTab }) => {
    const tabs = [{ name: 'Composer', icon: PencilSquareIcon }, { name: 'Analytics', icon: ChartBarIcon }, { name: 'Schedule', icon: CalendarIcon }];
    return (
        <div className="border-b border-gray-200 mb-8">
            <nav className="-mb-px flex space-x-8" aria-label="Tabs">
                {tabs.map((tab) => (
                    <button key={tab.name} onClick={() => setActiveTab(tab.name)}
                        className={`whitespace-nowrap flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-colors ${activeTab === tab.name ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}>
                        <tab.icon className="mr-2 h-5 w-5" /> {tab.name}
                    </button>
                ))}
            </nav>
        </div>
    );
};

const ComposerTabContent = () => {
    const [selectedPlatform, setSelectedPlatform] = useState('x');
    const [postContent, setPostContent] = useState('');
    const [postImages, setPostImages] = useState([]);
    const [topic, setTopic] = useState('');
    const [isGenerating, setIsGenerating] = useState(false);
    const [error, setError] = useState('');
    const [canGenerateAi, setCanGenerateAi] = useState(true);
    const [timeLeft, setTimeLeft] = useState('');
    const [isCopied, setIsCopied] = useState(false);
    const [userImages, setUserImages] = useState([]);
    const [isLoadingImages, setIsLoadingImages] = useState(true);
    const [imageError, setImageError] = useState('');
    const [activeDragId, setActiveDragId] = useState(null);


    // Fetch user images when component mounts
    useEffect(() => {
        setIsLoadingImages(true);
        fetch('/api/images')
            .then(res => {
                if (!res.ok) throw new Error('Failed to fetch images.');
                return res.json();
            })
            .then(data => setUserImages(data))
            .catch(err => setImageError(err.message))
            .finally(() => setIsLoadingImages(false));
    }, []);

    // AI Cooldown Logic
    useEffect(() => {
        const lastPostTimestamp = localStorage.getItem('lastAiPostTimestamp');
        if (lastPostTimestamp) {
            const twentyFourHours = 24 * 60 * 60 * 1000;
            const timeDiff = Date.now() - parseInt(lastPostTimestamp, 10);
            if (timeDiff < twentyFourHours) {
                setCanGenerateAi(false);
                let remaining = twentyFourHours - timeDiff;
                const interval = setInterval(() => {
                    remaining -= 1000;
                    if (remaining <= 0) {
                        clearInterval(interval);
                        setCanGenerateAi(true);
                        setTimeLeft('');
                        return;
                    }
                    const hours = Math.floor((remaining / (1000 * 60 * 60)) % 24);
                    const minutes = Math.floor((remaining / 1000 / 60) % 60);
                    setTimeLeft(`${hours}h ${minutes}m`);
                }, 1000);
                return () => clearInterval(interval);
            }
        }
    }, [canGenerateAi]);
    
    // Define the droppable area
    const { setNodeRef } = useDroppable({ id: 'post-composition-area' });
    
    // Define drag event handlers
    function handleDragStart(event) {
        setActiveDragId(event.active.id);
    }

     function handleDragEnd(event) {
        console.log('Drop Event:', event); // console to log errors on drop!
        setActiveDragId(null);
        const { over, active } = event;
        if (over && over.id === 'post-composition-area') {
            const droppedImage = active.data.current?.image; // Safely access the image data
            if (droppedImage && !postImages.find(img => img.id === droppedImage.id)) {
                setPostImages(current => [...current, droppedImage]);
            }
        }
    } 

    const handleRemoveImage = (imageId) => {
        setPostImages(current => current.filter(image => image.id !== imageId));
    };
    
    const handleGeneratePost = async () => {
        if (!topic.trim()) {
            setError('Please enter a topic for AI generation.');
            return;
        }
        if (!canGenerateAi) {
            setError('You can only generate one AI post every 24 hours.');
            return;
        }

        setIsGenerating(true);
        setError('');
        try {
            const response = await fetch('/api/ai/generate-social-post', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ topic, platform: selectedPlatform }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to generate post.');
            }

            const data = await response.json();
            setPostContent(data.post);
            localStorage.setItem('lastAiPostTimestamp', Date.now().toString());
            setCanGenerateAi(false); // Start cooldown
            // Re-trigger useEffect for cooldown timer
            const twentyFourHours = 24 * 60 * 60 * 1000;
            let remaining = twentyFourHours;
            const interval = setInterval(() => {
                remaining -= 1000;
                if (remaining <= 0) {
                    clearInterval(interval);
                    setCanGenerateAi(true);
                    setTimeLeft('');
                    return;
                }
                const hours = Math.floor((remaining / (1000 * 60 * 60)) % 24);
                const minutes = Math.floor((remaining / 1000 / 60) % 60);
                setTimeLeft(`${hours}h ${minutes}m`);
            }, 1000);

        } catch (err) {
            setError(err.message);
        } finally {
            setIsGenerating(false);
        }
    };

    const handleCopy = () => {
        navigator.clipboard.writeText(postContent);
        setIsCopied(true);
        setTimeout(() => setIsCopied(false), 2000); // Reset copied state after 2 seconds
    };

    const handlePostNow = async () => {
        // This is a placeholder. In a real app, you'd integrate with social media APIs.
        // For this demo, we'll just simulate a successful post.
        if (selectedPlatform !== 'x') {
            setError('Posting is currently only supported for X (Twitter).');
            return;
        }

        if (postContent.length === 0) {
            setError('Post content cannot be empty.');
            return;
        }

        if (postContent.length > PLATFORMS.x.maxLength) {
            setError('Post content exceeds character limit for X (Twitter).');
            return;
        }

        // Simulate API call
        console.log(`Attempting to post to ${PLATFORMS[selectedPlatform].name}:`, {
            content: postContent,
            images: postImages.map(img => img.image_url),
        });

        try {
            // In a real application, this would be an API call to your backend
            // which then interacts with the social media platform's API.
            // For demonstration, we'll just show a success message.
            await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
            alert(`Successfully posted to ${PLATFORMS[selectedPlatform].name}!`);
            setPostContent(''); // Clear content after successful post
            setPostImages([]); // Clear images
            setError(''); // Clear any previous errors
        } catch (err) {
            setError('Failed to post. Please try again.');
            console.error('Post error:', err);
        }
    };

    const handleAddImage = async (imageUrl) => {
        if (!imageUrl) return;
        try {
           const response = await fetch('/api/images', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ imageUrl }),
            });
            if (!response.ok) throw new Error('Failed to add image.');
            const newImage = await response.json();
            setUserImages(prev => [newImage, ...prev]);
        } catch (err) {
            setImageError(err.message);
        }
    };


    const activeDragImage = activeDragId ? userImages.find(img => img.id === activeDragId) : null;
    const currentPlatform = PLATFORMS[selectedPlatform];
    const currentLength = postContent.length;
    const maxLength = currentPlatform.maxLength;
    const isOverLimit = currentLength > maxLength;

    return (
         <DndContext onDragStart={handleDragStart} onDragEnd={handleDragEnd} collisionDetection={pointerWithin}>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-md border">
                    <div className="flex items-center border-b pb-4 overflow-x-auto whitespace-nowrap">
                        {platformKeys.map(key => {
                            const platform = PLATFORMS[key];
                            return (
                                <button
                                    key={key}
                                    onClick={() => setSelectedPlatform(key)}
                                    disabled={platform.disabled}
                                    className={`flex items-center px-4 py-2 text-sm font-medium rounded-md transition-colors mr-2 ${selectedPlatform === key ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} ${platform.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    title={platform.disabled ? `${platform.name} integration coming soon!` : `Select ${platform.name}`}
                                >
                                    {platform.icon && <platform.icon className="h-5 w-5 mr-2" />} {platform.name}
                                </button>
                            );
                        })}
                    </div>
                    
                    {/* Droppable Image Preview Area */}
                    <div ref={setNodeRef} className="mt-4 p-2 border-2 border-dashed rounded-lg min-h-[120px] flex items-center justify-center bg-gray-50 flex-wrap gap-2">
                        {postImages.length > 0 ? (
                            postImages.map(image => (
                                <div key={image.id} className="relative w-24 h-24">
                                    <img src={image.image_url} alt="Post preview" className="w-full h-full object-cover rounded-md" />
                                    <button onClick={() => handleRemoveImage(image.id)} className="absolute -top-2 -right-2 bg-gray-700 text-white rounded-full p-0.5 hover:bg-red-600" aria-label="Remove image">
                                        <XCircleIcon className="h-5 w-5" />
                                    </button>
                                </div>
                            ))
                        ) : (
                            <p className="text-gray-400 text-sm">Drag and drop images here</p>
                        )}
                    </div>

                    {/* Text Area */}
                    <div className="mt-4"><textarea value={postContent} onChange={(e) => setPostContent(e.target.value)} placeholder={currentPlatform.placeholder} className="w-full h-64 p-4 border border-gray-200 rounded-md focus:ring-blue-500 focus:border-blue-500 text-lg"/></div>
                    
                    {/* Action Buttons */}
                   <div className="mt-4 flex justify-between items-center">
    <span className={`text-sm font-medium ${isOverLimit ? 'text-red-600' : 'text-gray-500'}`}>{currentLength.toLocaleString()} / {maxLength.toLocaleString()}</span>
    <div className="flex items-center gap-x-2">
        <button onClick={handleCopy} disabled={postContent.length === 0} title="Copy post content" className="flex items-center justify-center px-4 py-2 border text-sm font-medium rounded-md shadow-sm transition-colors bg-white text-gray-700 border-gray-300 hover:bg-gray-50 disabled:bg-gray-100">
            {isCopied ? <CheckIcon className="h-5 w-5 mr-2" /> : <ClipboardDocumentIcon className="h-5 w-5 mr-2" />} {isCopied ? 'Copied!' : 'Copy'}
        </button>
        
        {/* CORRECTED: Added flex classes and an icon to this button */}
        <button onClick={handlePostNow} disabled={postContent.length === 0 || isOverLimit || selectedPlatform !== 'x'} title="Post to X" className="flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400">
            <PaperAirplaneIcon className="h-5 w-5 mr-2" />
            Post Now
        </button>

        <button disabled className="flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-400 cursor-not-allowed">
            <CalendarIcon className="h-5 w-5 mr-2" />Schedule
        </button>
    </div>
</div>
                </div>

                <div className="lg:col-span-1 space-y-8">
                    {/* AI Assistant card */}
                    <div className="bg-white p-6 rounded-lg shadow-md border space-y-4">
                        <h3 className="font-semibold text-lg">AI Assistant</h3>
                          <div>
                            <label htmlFor="topic" className="block text-sm font-medium text-gray-700">Post Topic</label>
                            <input type="text" id="topic" value={topic} onChange={(e) => setTopic(e.target.value)} placeholder="e.g., 'New Summer T-Shirt Sale'" className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm" />
                        </div>
                        <button onClick={handleGeneratePost} disabled={!canGenerateAi || isGenerating || !topic.trim()} className="w-full flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400">
                            <SparklesIcon className="h-5 w-5 mr-2" />
                            {isGenerating ? 'Generating...' : 'Generate with AI'}
                        </button>
                        {!canGenerateAi && <p className="text-xs text-center text-gray-500">You can generate another post in {timeLeft}.</p>}
                        {error && <p className="text-xs text-center text-red-600">{error}</p>}
                    </div>
                    {/* Scheduled Posts card */}
                    <div className="bg-white p-6 rounded-lg shadow-md border">
                        <h3 className="font-semibold text-lg mb-4">Scheduled Posts</h3>
                        <div className="space-y-4 max-h-96 overflow-y-auto">
                           <p className="text-sm text-gray-500 text-center py-4">No posts scheduled.</p>
                        </div>
                    </div>
                </div>
            </div>

<ImageManager 
                images={userImages}
                isLoading={isLoadingImages}
                error={imageError}
                onAddImage={handleAddImage}
            />

            <DragOverlay>
                {activeDragImage ? (
                    <div className="aspect-square w-24 h-24 rounded-md shadow-lg">
                         <img src={activeDragImage.image_url} className="w-full h-full object-cover rounded-md" alt="Dragged item" />
                    </div>
                ) : null}
            </DragOverlay>
        </DndContext>
    );
};

// Dummy data for charts
const dummyLineChartData = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
    datasets: [
        {
            label: 'Impressions',
            data: [65, 59, 80, 81, 56, 55, 40],
            fill: false,
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1,
        },
        {
            label: 'Engagements',
            data: [20, 30, 45, 40, 35, 50, 60],
            fill: false,
            borderColor: 'rgb(153, 102, 255)',
            tension: 0.1,
        },
    ],
};

const dummyDoughnutChartData = {
    labels: ['Likes', 'Comments', 'Shares', 'Clicks'],
    datasets: [
        {
            label: '# of Interactions',
            data: [300, 50, 100, 150],
            backgroundColor: [
                'rgba(255, 99, 132, 0.7)',
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
            ],
            borderWidth: 1,
        },
    ],
};

const dummyDoughnutOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
        legend: {
            position: 'bottom',
        },
    },
};

const AnalyticsTabContent = () => {
    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Overview Stats */}
            <div className="lg:col-span-3 grid grid-cols-1 md:grid-cols-3 gap-4">
                <StatCard title="Total Impressions" value="12,345" icon={<UserGroupIcon />} />
                <StatCard title="Total Engagements" value="2,890" icon={<CheckIcon />} />
                <StatCard title="Engagement Rate" value="23.4%" icon={<ChartBarIcon />} />
            </div>

            {/* Line Chart for Impressions & Engagements */}
            <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-md border">
                <h3 className="font-semibold text-lg mb-4">Impressions & Engagements Over Time</h3>
                <div className="h-80">
                    <Line data={dummyLineChartData} options={{ responsive: true, maintainAspectRatio: false }} />
                </div>
            </div>

            {/* Doughnut Chart for Engagement Breakdown */}
            <div className="lg:col-span-1 bg-white p-6 rounded-lg shadow-md border">
                <h3 className="font-semibold text-lg mb-4">Engagement Breakdown</h3>
                <div className="h-80 flex items-center justify-center">
                    <Doughnut data={dummyDoughnutChartData} options={dummyDoughnutOptions} />
                </div>
            </div>

            {/* Top Performing Posts (Dummy List) */}
            <div className="lg:col-span-1 bg-white p-6 rounded-lg shadow-md border">
                <h3 className="font-semibold text-lg mb-4">Top Performing Posts</h3>
                <ul className="divide-y divide-gray-200">
                    <li className="py-3">
                        <p className="text-sm font-medium text-gray-900">"Excited to announce our new product!"</p>
                        <p className="text-xs text-gray-500">Impressions: 1,500 | Engagements: 300</p>
                    </li>
                    <li className="py-3">
                        <p className="text-sm font-medium text-gray-900">"Behind the scenes at our office."</p>
                        <p className="text-xs text-gray-500">Impressions: 1,200 | Engagements: 250</p>
                    </li>
                    <li className="py-3">
                        <p className="text-sm font-medium text-gray-900">"Tip of the day: Boost your productivity!"</p>
                        <p className="text-xs text-gray-500">Impressions: 900 | Engagements: 200</p>
                    </li>
                </ul>
            </div>

            {/* Audience Demographics (Dummy Content) */}
            <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-md border">
                <h3 className="font-semibold text-lg mb-4">Audience Demographics</h3>
                <div className="grid grid-cols-2 gap-4 text-sm text-gray-700">
                    <div>
                        <p className="font-medium">Age:</p>
                        <p>18-24: 20%</p>
                        <p>25-34: 45%</p>
                        <p>35-44: 25%</p>
                        <p>45+: 10%</p>
                    </div>
                    <div>
                        <p className="font-medium">Gender:</p>
                        <p>Female: 55%</p>
                        <p>Male: 45%</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

const ScheduleTabContent = () => {
    const [events, setEvents] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    // Fetch scheduled posts from your backend
    useEffect(() => {
        const fetchScheduledPosts = async () => {
            setIsLoading(true);
            try {
                // We will create this API route in a later step
                // const response = await fetch('/api/scheduled-posts');
                // const data = await response.json();
                
                // For now, we'll use dummy data
                const dummyData = [
                    {
                        id: 1,
                        title: 'Post to X: Our biggest sale is now live!...',
                        start: moment().add(1, 'days').set({ hour: 10, minute: 30 }).toDate(),
                        end: moment().add(1, 'days').set({ hour: 11, minute: 0 }).toDate(),
                        resource: { platform: 'x' } // Store extra data here
                    },
                    {
                        id: 2,
                        title: 'Post to Pinterest: New collection just dropped...',
                        start: moment().add(2, 'days').set({ hour: 14, minute: 0 }).toDate(),
                        end: moment().add(2, 'days').set({ hour: 14, minute: 30 }).toDate(),
                        resource: { platform: 'pinterest' }
                    }
                ];

                // The actual data would be mapped to the format react-big-calendar expects
                setEvents(dummyData);

            } catch (error) {
                console.error("Failed to fetch scheduled posts:", error);
            } finally {
                setIsLoading(false);
            }
        };

        fetchScheduledPosts();
    }, []);

    const onEventDrop = useCallback(
        ({ event, start, end, isAllDay }) => {
            // Ensure the new start date is not in the past
            if (moment(start).isBefore(moment(), 'day')) {
                alert("Cannot move events to a past date.");
                return;
            }

            setEvents((prevEvents) => {
                const nextEvents = prevEvents.map((existingEvent) => {
                    return existingEvent.id === event.id
                        ? { ...existingEvent, start, end, allDay: isAllDay }
                        : existingEvent;
                });
                // In a real application, you would also send this update to your backend
                // e.g., await updateScheduledPost(event.id, { start, end, allDay: isAllDay });
                return nextEvents;
            });
        },
        [setEvents]
    );
    // Custom styling for calendar events based on platform
    const eventPropGetter = useCallback(
        (event) => {
            const platform = event.resource?.platform;
            let style = { borderRadius: '5px', border: 'none', color: 'white', display: 'block' };
            if (platform === 'x') style.backgroundColor = '#1DA1F2'; // Twitter Blue
            else if (platform === 'pinterest') style.backgroundColor = '#E60023'; // Pinterest Red
            else style.backgroundColor = '#6B7280'; // Gray
            return { style };
        },
        []
    );

    if (isLoading) return <p>Loading schedule...</p>;
    return (
        <div className="bg-white p-6 rounded-lg shadow-md border" style={{ height: '80vh' }}>
            <DragAndDropCalendar localizer={localizer} events={events} startAccessor="start" endAccessor="end" style={{ height: '100%' }} eventPropGetter={eventPropGetter} views={['month', 'week', 'day']} defaultView="month" resizable onEventDrop={onEventDrop} />
        </div>
    );
};

export default function SocialMediaManagerPage() {
    const { status } = useSession();
    const [activeTab, setActiveTab] = useState('Composer');

    if (status === 'loading') return <Layout><p>Loading...</p></Layout>;

    return (
        <Layout>
            <div className="mb-8">
                <h2 className="text-3xl font-bold">Social Media Manager</h2>
                <p className="mt-1 text-sm text-gray-500">Design, schedule, and analyze your social media content.</p>
            </div>
            <SocialNav activeTab={activeTab} setActiveTab={setActiveTab} />
            {activeTab === 'Composer' && <ComposerTabContent />}
            {activeTab === 'Analytics' && <AnalyticsTabContent />}
            {activeTab === 'Schedule' && <ScheduleTabContent />}
        </Layout>
    );
}